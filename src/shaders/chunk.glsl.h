#pragma once
/*
    #version:1# (machine generated, don't edit!)

    Generated by sokol-shdc (https://github.com/floooh/sokol-tools)

    Cmdline:
        sokol-shdc -i chunk.glsl -o chunk.glsl.h -l glsl300es

    Overview:
    =========
    Shader program: 'chunk':
        Get shader desc: chunk_shader_desc(sg_query_backend());
        Vertex Shader: vs
        Fragment Shader: fs
        Attributes:
            ATTR_chunk_a_vertex => 0
    Bindings:
        Uniform block 'vs_params':
            C struct: vs_params_t
            Bind slot: UB_vs_params => 0
        Uniform block 'fs_params':
            C struct: fs_params_t
            Bind slot: UB_fs_params => 1
        Texture 'u_tex':
            Image type: SG_IMAGETYPE_2D
            Sample type: SG_IMAGESAMPLETYPE_FLOAT
            Multisampled: false
            Bind slot: VIEW_u_tex => 0
        Sampler 'u_smp':
            Type: SG_SAMPLERTYPE_FILTERING
            Bind slot: SMP_u_smp => 0
*/
#if !defined(SOKOL_GFX_INCLUDED)
#error "Please include sokol_gfx.h before chunk.glsl.h"
#endif
#if !defined(SOKOL_SHDC_ALIGN)
#if defined(_MSC_VER)
#define SOKOL_SHDC_ALIGN(a) __declspec(align(a))
#else
#define SOKOL_SHDC_ALIGN(a) __attribute__((aligned(a)))
#endif
#endif
#define ATTR_chunk_a_vertex (0)
#define UB_vs_params (0)
#define UB_fs_params (1)
#define VIEW_u_tex (0)
#define SMP_u_smp (0)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct vs_params_t {
    em_mat4 u_mvp;
    em_mat4 u_view;
    float u_ccord[3];
    uint8_t _pad_140[4];
} vs_params_t;
#pragma pack(pop)
#pragma pack(push,1)
SOKOL_SHDC_ALIGN(16) typedef struct fs_params_t {
    float u_fog_data[4];
} fs_params_t;
#pragma pack(pop)
/*
    #version 300 es

    uniform vec4 vs_params[9];
    layout(location = 0) in uvec4 a_vertex;
    out vec2 v_uv;
    out vec3 v_normal;
    out float v_depth;

    vec3 _unpack_pos(uvec4 vert)
    {
        return vec3(float(vert.x >> uint(3)), float(vert.y), float(vert.z >> uint(3)));
    }

    vec2 _unpack_uv(uvec4 vert)
    {
        return vec2(float((vert.w >> uint(4)) + ((vert.x >> uint(2)) & 1u)) * 0.0625, float((vert.w & 15u) + ((vert.x >> uint(1)) & 1u)) * 0.0625);
    }

    vec3 _unpack_normal(uvec4 vert)
    {
        uint _95 = vert.z & 7u;
        return vec3(1.0) - (vec3(float(_95 & 1u), float((_95 >> uint(1)) & 1u), float((_95 >> uint(2)) & 1u)) * 2.0);
    }

    void main()
    {
        uvec4 param = a_vertex;
        uvec4 param_1 = a_vertex;
        uvec4 param_2 = a_vertex;
        vec4 _154 = vec4(_unpack_pos(param) + vs_params[8].xyz, 1.0);
        gl_Position = mat4(vs_params[0], vs_params[1], vs_params[2], vs_params[3]) * _154;
        v_uv = _unpack_uv(param_1);
        v_normal = _unpack_normal(param_2);
        v_depth = -(mat4(vs_params[4], vs_params[5], vs_params[6], vs_params[7]) * _154).z;
    }

*/
static const uint8_t vs_source_glsl300es[1031] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x0a,0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x76,0x65,0x63,0x34,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x39,0x5d,0x3b,0x0a,0x6c,0x61,0x79,0x6f,
    0x75,0x74,0x28,0x6c,0x6f,0x63,0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,
    0x20,0x69,0x6e,0x20,0x75,0x76,0x65,0x63,0x34,0x20,0x61,0x5f,0x76,0x65,0x72,0x74,
    0x65,0x78,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,
    0x76,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x76,0x65,0x63,0x33,0x20,0x76,0x5f,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x6f,0x75,0x74,0x20,0x66,0x6c,0x6f,0x61,0x74,0x20,
    0x76,0x5f,0x64,0x65,0x70,0x74,0x68,0x3b,0x0a,0x0a,0x76,0x65,0x63,0x33,0x20,0x5f,
    0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,0x28,0x75,0x76,0x65,0x63,0x34,
    0x20,0x76,0x65,0x72,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x72,0x65,0x74,
    0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x66,0x6c,0x6f,0x61,0x74,0x28,0x76,
    0x65,0x72,0x74,0x2e,0x78,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x33,0x29,
    0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x76,0x65,0x72,0x74,0x2e,0x79,0x29,
    0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,0x28,0x76,0x65,0x72,0x74,0x2e,0x7a,0x20,0x3e,
    0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x33,0x29,0x29,0x29,0x3b,0x0a,0x7d,0x0a,0x0a,
    0x76,0x65,0x63,0x32,0x20,0x5f,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x75,0x76,0x28,
    0x75,0x76,0x65,0x63,0x34,0x20,0x76,0x65,0x72,0x74,0x29,0x0a,0x7b,0x0a,0x20,0x20,
    0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x32,0x28,0x66,0x6c,
    0x6f,0x61,0x74,0x28,0x28,0x76,0x65,0x72,0x74,0x2e,0x77,0x20,0x3e,0x3e,0x20,0x75,
    0x69,0x6e,0x74,0x28,0x34,0x29,0x29,0x20,0x2b,0x20,0x28,0x28,0x76,0x65,0x72,0x74,
    0x2e,0x78,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x32,0x29,0x29,0x20,0x26,
    0x20,0x31,0x75,0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x36,0x32,0x35,0x2c,0x20,
    0x66,0x6c,0x6f,0x61,0x74,0x28,0x28,0x76,0x65,0x72,0x74,0x2e,0x77,0x20,0x26,0x20,
    0x31,0x35,0x75,0x29,0x20,0x2b,0x20,0x28,0x28,0x76,0x65,0x72,0x74,0x2e,0x78,0x20,
    0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x31,0x29,0x29,0x20,0x26,0x20,0x31,0x75,
    0x29,0x29,0x20,0x2a,0x20,0x30,0x2e,0x30,0x36,0x32,0x35,0x29,0x3b,0x0a,0x7d,0x0a,
    0x0a,0x76,0x65,0x63,0x33,0x20,0x5f,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x6e,0x6f,
    0x72,0x6d,0x61,0x6c,0x28,0x75,0x76,0x65,0x63,0x34,0x20,0x76,0x65,0x72,0x74,0x29,
    0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x69,0x6e,0x74,0x20,0x5f,0x39,0x35,0x20,
    0x3d,0x20,0x76,0x65,0x72,0x74,0x2e,0x7a,0x20,0x26,0x20,0x37,0x75,0x3b,0x0a,0x20,
    0x20,0x20,0x20,0x72,0x65,0x74,0x75,0x72,0x6e,0x20,0x76,0x65,0x63,0x33,0x28,0x31,
    0x2e,0x30,0x29,0x20,0x2d,0x20,0x28,0x76,0x65,0x63,0x33,0x28,0x66,0x6c,0x6f,0x61,
    0x74,0x28,0x5f,0x39,0x35,0x20,0x26,0x20,0x31,0x75,0x29,0x2c,0x20,0x66,0x6c,0x6f,
    0x61,0x74,0x28,0x28,0x5f,0x39,0x35,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,
    0x31,0x29,0x29,0x20,0x26,0x20,0x31,0x75,0x29,0x2c,0x20,0x66,0x6c,0x6f,0x61,0x74,
    0x28,0x28,0x5f,0x39,0x35,0x20,0x3e,0x3e,0x20,0x75,0x69,0x6e,0x74,0x28,0x32,0x29,
    0x29,0x20,0x26,0x20,0x31,0x75,0x29,0x29,0x20,0x2a,0x20,0x32,0x2e,0x30,0x29,0x3b,
    0x0a,0x7d,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,
    0x7b,0x0a,0x20,0x20,0x20,0x20,0x75,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,
    0x6d,0x20,0x3d,0x20,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,
    0x20,0x20,0x75,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,0x20,
    0x3d,0x20,0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x75,0x76,0x65,0x63,0x34,0x20,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x20,0x3d,0x20,
    0x61,0x5f,0x76,0x65,0x72,0x74,0x65,0x78,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x65,
    0x63,0x34,0x20,0x5f,0x31,0x35,0x34,0x20,0x3d,0x20,0x76,0x65,0x63,0x34,0x28,0x5f,
    0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x70,0x6f,0x73,0x28,0x70,0x61,0x72,0x61,0x6d,
    0x29,0x20,0x2b,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x38,0x5d,
    0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,
    0x67,0x6c,0x5f,0x50,0x6f,0x73,0x69,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x6d,0x61,
    0x74,0x34,0x28,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2c,
    0x20,0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x2c,0x20,0x76,
    0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x32,0x5d,0x2c,0x20,0x76,0x73,0x5f,
    0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x33,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x31,0x35,
    0x34,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x75,0x76,0x20,0x3d,0x20,0x5f,0x75,
    0x6e,0x70,0x61,0x63,0x6b,0x5f,0x75,0x76,0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x31,
    0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x20,
    0x3d,0x20,0x5f,0x75,0x6e,0x70,0x61,0x63,0x6b,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,
    0x28,0x70,0x61,0x72,0x61,0x6d,0x5f,0x32,0x29,0x3b,0x0a,0x20,0x20,0x20,0x20,0x76,
    0x5f,0x64,0x65,0x70,0x74,0x68,0x20,0x3d,0x20,0x2d,0x28,0x6d,0x61,0x74,0x34,0x28,
    0x76,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x34,0x5d,0x2c,0x20,0x76,0x73,
    0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x35,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x36,0x5d,0x2c,0x20,0x76,0x73,0x5f,0x70,0x61,0x72,
    0x61,0x6d,0x73,0x5b,0x37,0x5d,0x29,0x20,0x2a,0x20,0x5f,0x31,0x35,0x34,0x29,0x2e,
    0x7a,0x3b,0x0a,0x7d,0x0a,0x0a,0x00,
};
/*
    #version 300 es
    precision mediump float;
    precision highp int;

    uniform highp vec4 fs_params[1];
    uniform highp sampler2D u_tex_u_smp;

    layout(location = 0) out highp vec4 frag_color;
    in highp float v_depth;
    in highp vec2 v_uv;
    in highp vec3 v_normal;

    void main()
    {
        if (frag_color.w < 0.00999999977648258209228515625)
        {
            discard;
        }
        frag_color = mix(texture(u_tex_u_smp, v_uv), vec4(fs_params[0].xyz, 1.0), vec4(smoothstep(fs_params[0].w - 10.0, fs_params[0].w, v_depth)));
    }

*/
static const uint8_t fs_source_glsl300es[499] = {
    0x23,0x76,0x65,0x72,0x73,0x69,0x6f,0x6e,0x20,0x33,0x30,0x30,0x20,0x65,0x73,0x0a,
    0x70,0x72,0x65,0x63,0x69,0x73,0x69,0x6f,0x6e,0x20,0x6d,0x65,0x64,0x69,0x75,0x6d,
    0x70,0x20,0x66,0x6c,0x6f,0x61,0x74,0x3b,0x0a,0x70,0x72,0x65,0x63,0x69,0x73,0x69,
    0x6f,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x69,0x6e,0x74,0x3b,0x0a,0x0a,0x75,
    0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,
    0x34,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x31,0x5d,0x3b,0x0a,
    0x75,0x6e,0x69,0x66,0x6f,0x72,0x6d,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x73,0x61,
    0x6d,0x70,0x6c,0x65,0x72,0x32,0x44,0x20,0x75,0x5f,0x74,0x65,0x78,0x5f,0x75,0x5f,
    0x73,0x6d,0x70,0x3b,0x0a,0x0a,0x6c,0x61,0x79,0x6f,0x75,0x74,0x28,0x6c,0x6f,0x63,
    0x61,0x74,0x69,0x6f,0x6e,0x20,0x3d,0x20,0x30,0x29,0x20,0x6f,0x75,0x74,0x20,0x68,
    0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x34,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,
    0x6f,0x6c,0x6f,0x72,0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x66,
    0x6c,0x6f,0x61,0x74,0x20,0x76,0x5f,0x64,0x65,0x70,0x74,0x68,0x3b,0x0a,0x69,0x6e,
    0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x32,0x20,0x76,0x5f,0x75,0x76,
    0x3b,0x0a,0x69,0x6e,0x20,0x68,0x69,0x67,0x68,0x70,0x20,0x76,0x65,0x63,0x33,0x20,
    0x76,0x5f,0x6e,0x6f,0x72,0x6d,0x61,0x6c,0x3b,0x0a,0x0a,0x76,0x6f,0x69,0x64,0x20,
    0x6d,0x61,0x69,0x6e,0x28,0x29,0x0a,0x7b,0x0a,0x20,0x20,0x20,0x20,0x69,0x66,0x20,
    0x28,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x2e,0x77,0x20,0x3c,0x20,
    0x30,0x2e,0x30,0x30,0x39,0x39,0x39,0x39,0x39,0x39,0x39,0x37,0x37,0x36,0x34,0x38,
    0x32,0x35,0x38,0x32,0x30,0x39,0x32,0x32,0x38,0x35,0x31,0x35,0x36,0x32,0x35,0x29,
    0x0a,0x20,0x20,0x20,0x20,0x7b,0x0a,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x20,0x64,
    0x69,0x73,0x63,0x61,0x72,0x64,0x3b,0x0a,0x20,0x20,0x20,0x20,0x7d,0x0a,0x20,0x20,
    0x20,0x20,0x66,0x72,0x61,0x67,0x5f,0x63,0x6f,0x6c,0x6f,0x72,0x20,0x3d,0x20,0x6d,
    0x69,0x78,0x28,0x74,0x65,0x78,0x74,0x75,0x72,0x65,0x28,0x75,0x5f,0x74,0x65,0x78,
    0x5f,0x75,0x5f,0x73,0x6d,0x70,0x2c,0x20,0x76,0x5f,0x75,0x76,0x29,0x2c,0x20,0x76,
    0x65,0x63,0x34,0x28,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,
    0x2e,0x78,0x79,0x7a,0x2c,0x20,0x31,0x2e,0x30,0x29,0x2c,0x20,0x76,0x65,0x63,0x34,
    0x28,0x73,0x6d,0x6f,0x6f,0x74,0x68,0x73,0x74,0x65,0x70,0x28,0x66,0x73,0x5f,0x70,
    0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,0x77,0x20,0x2d,0x20,0x31,0x30,0x2e,
    0x30,0x2c,0x20,0x66,0x73,0x5f,0x70,0x61,0x72,0x61,0x6d,0x73,0x5b,0x30,0x5d,0x2e,
    0x77,0x2c,0x20,0x76,0x5f,0x64,0x65,0x70,0x74,0x68,0x29,0x29,0x29,0x3b,0x0a,0x7d,
    0x0a,0x0a,0x00,
};
static inline const sg_shader_desc* chunk_shader_desc(sg_backend backend) {
    if (backend == SG_BACKEND_GLES3) {
        static sg_shader_desc desc;
        static bool valid;
        if (!valid) {
            valid = true;
            desc.vertex_func.source = (const char*)vs_source_glsl300es;
            desc.vertex_func.entry = "main";
            desc.fragment_func.source = (const char*)fs_source_glsl300es;
            desc.fragment_func.entry = "main";
            desc.attrs[0].base_type = SG_SHADERATTRBASETYPE_UINT;
            desc.attrs[0].glsl_name = "a_vertex";
            desc.uniform_blocks[0].stage = SG_SHADERSTAGE_VERTEX;
            desc.uniform_blocks[0].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[0].size = 144;
            desc.uniform_blocks[0].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[0].glsl_uniforms[0].array_count = 9;
            desc.uniform_blocks[0].glsl_uniforms[0].glsl_name = "vs_params";
            desc.uniform_blocks[1].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.uniform_blocks[1].layout = SG_UNIFORMLAYOUT_STD140;
            desc.uniform_blocks[1].size = 16;
            desc.uniform_blocks[1].glsl_uniforms[0].type = SG_UNIFORMTYPE_FLOAT4;
            desc.uniform_blocks[1].glsl_uniforms[0].array_count = 1;
            desc.uniform_blocks[1].glsl_uniforms[0].glsl_name = "fs_params";
            desc.views[0].texture.stage = SG_SHADERSTAGE_FRAGMENT;
            desc.views[0].texture.image_type = SG_IMAGETYPE_2D;
            desc.views[0].texture.sample_type = SG_IMAGESAMPLETYPE_FLOAT;
            desc.views[0].texture.multisampled = false;
            desc.samplers[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.samplers[0].sampler_type = SG_SAMPLERTYPE_FILTERING;
            desc.texture_sampler_pairs[0].stage = SG_SHADERSTAGE_FRAGMENT;
            desc.texture_sampler_pairs[0].view_slot = 0;
            desc.texture_sampler_pairs[0].sampler_slot = 0;
            desc.texture_sampler_pairs[0].glsl_name = "u_tex_u_smp";
            desc.label = "chunk_shader";
        }
        return &desc;
    }
    return 0;
}
